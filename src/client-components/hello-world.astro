---
export interface Props {
  name: string;
}
const {name} = Astro.props
---

<hello-world name={name} />

<script>
  import WebComponent from "web-component-base";
  import ClientComponent from "../decorators/ClientComponent";
  import { deserialize } from "@ayco/astro-resume";
  import type { SomeData } from "../pages/index.astro";

  @ClientComponent({
    selector: "hello-world",
    observedProperties: ["name"],
  })
  class HelloWorld extends WebComponent {
    name = 'World';
    data: undefined | SomeData;
    onInit() {
      this.data = deserialize('app-config');
      console.log(this.data);
      this.onclick = () => {
        this.name = 'World';
        this.render(); // TODO: create function that returns Proxy, call render under the hood when changed
      }
    }
    onChanges(changes: Record<string, any>) {
      console.log(changes);
    }
    get template() {
      return `<h1>Hello ${this.name}!</h1><span>${this.data?.hello}</span>`
    }
  }
</script>
